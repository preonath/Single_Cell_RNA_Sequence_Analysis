suppressPackageStartupMessages({
library(tidyverse)
library(patchwork)
library(plyr)
library(Seurat)
library(UCell)
library(ggpubr)
library(SingleCellExperiment)
library(scuttle)
library(celldex)
library(DT)
library(scales)
library(UCell)
library(HGNChelper)
library(openxlsx)
})
install.packages("UCell")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("UCell")
suppressPackageStartupMessages({
library(tidyverse)
library(patchwork)
library(plyr)
library(Seurat)
library(UCell)
library(ggpubr)
library(SingleCellExperiment)
library(scuttle)
library(celldex)
library(DT)
library(scales)
library(UCell)
library(HGNChelper)
library(openxlsx)
})
BiocManager::install("ggpubr")
install.packages("ggpubr", dependencies = TRUE)
suppressPackageStartupMessages({
library(tidyverse)
library(patchwork)
library(plyr)
library(Seurat)
library(UCell)
library(ggpubr)
library(SingleCellExperiment)
library(scuttle)
library(celldex)
library(DT)
library(scales)
library(UCell)
library(HGNChelper)
library(openxlsx)
})
install.packages("matrixStats")
suppressPackageStartupMessages({
library(tidyverse)
library(patchwork)
library(plyr)
library(Seurat)
library(UCell)
library(ggpubr)
library(SingleCellExperiment)
library(scuttle)
library(celldex)
library(DT)
library(scales)
library(UCell)
library(HGNChelper)
library(openxlsx)
})
BiocManager::install("scuttle")
BiocManager::install("DT")
BiocManager::install("scales")
#BiocManager::install("UCell")
BiocManager::install("HGNChelper")
BiocManager::install("openxlsx")
BiocManager::install("scales")
BiocManager::install("scales", force = TRUE)
#BiocManager::install("UCell")
BiocManager::install("HGNChelper")
#BiocManager::install("UCell")
BiocManager::install("HGNChelper", force = TRUE)
install.packages("matrixStats", force = TRUE)
install.packages("matrixStats", force = TRUE)
suppressPackageStartupMessages({
library(tidyverse)
library(patchwork)
library(plyr)
library(Seurat)
library(UCell)
library(ggpubr)
library(SingleCellExperiment)
library(scuttle)
library(celldex)
library(DT)
library(scales)
library(UCell)
library(HGNChelper)
library(openxlsx)
})
BiocManager::install("celldex", force = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("KEGGREST", "AnnotationDbi", "AnnotationHub", "ExperimentHub", "celldex"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("KEGGREST", "AnnotationDbi", "AnnotationHub", "ExperimentHub", "celldex"))
suppressPackageStartupMessages({
library(tidyverse)
library(patchwork)
library(plyr)
library(Seurat)
library(UCell)
library(ggpubr)
library(SingleCellExperiment)
library(scuttle)
library(celldex)
library(DT)
library(scales)
library(UCell)
library(HGNChelper)
library(openxlsx)
})
install.packages("celldex")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("celldex")
suppressPackageStartupMessages({
library(tidyverse)
library(patchwork)
library(plyr)
library(Seurat)
library(UCell)
library(ggpubr)
library(SingleCellExperiment)
library(scuttle)
library(celldex)
library(DT)
library(scales)
# library(UCell)
library(HGNChelper)
library(openxlsx)
})
suppressPackageStartupMessages({
library(tidyverse)
library(patchwork)
library(plyr)
library(Seurat)
library(UCell)
library(ggpubr)
library(SingleCellExperiment)
library(scuttle)
# library(celldex)
library(DT)
library(scales)
library(HGNChelper)
library(openxlsx)
})
# Set the path to the directory containing your files
base_path <- "/media/asus/275dd380-2319-4638-bcdd-5f65b2b1d4b5/CHRF_Project_Data/Single_Cell/Honeycomb_Biotechnologies/Data_Analysis/3_Additional_Analysis_Resources/1_Example_Data_for_BeeNetPLUS/1_Practice_running_BeeNetPLUS_using_this_dataset/BeeNetOutputs"
# Transcript count matrix files
CMfile <- list.files(path = base_path, pattern = "TCM.tsv.gz", full.names = TRUE)
# ReadsQC files
readsFile <- list.files(path = base_path, pattern = "ReadsQC.tsv", full.names = TRUE)
# SampleQC file
samplesFile <- list.files(path = base_path, pattern = "SampleQC.tsv", full.names = TRUE)
# Replace sample names below with the name of your sample. Make sure that the order of the samples and the order of the groups are correct!
sampleslist <- c("MySample1", "MySample2", "MySample3", "MySample4")
groupslist <- c("7.5k", "7.5k", "30k", "30k")
generate_seurat_object<- function(sample, group_name = ""){
# Load count matrix file
dataTran <- read.table(CMfile[grep(sample, CMfile)],
header=1,
row.names=1,
check.names=FALSE ,
sep="\t",
quote = "",
stringsAsFactors=0)
# Load read info for each barcode
dataReads <- read.table(readsFile[grep(sample, readsFile)],
header=1,
row.names=1)
# Make sure order of read info matches order of TCM matrix
table(rownames(dataReads) == colnames(dataTran))
reads=dataReads[rownames(dataReads) %in% colnames(dataTran),]
# Create a Seurat Object
obj <- CreateSeuratObject(counts=dataTran, project = sample)
# Calculate metadata info
logtotreads <- log10(as.matrix(reads)[,1])
readAll <- dataReads[,1]
readMap <- reads[,2]
readMapPct <- readMap/readAll
readUnmap <- readAll-readMap
readUnmapPct <- readUnmap/readAll
readExon <- reads[,3]
readExonPct <- readExon/readAll
readExonMapPct <- readExon/readMap
names(readExon) <- colnames(obj)
obj <- AddMetaData(obj, readExon, "ExonReads")
names(readExonMapPct) <- colnames(obj)
names(readExonPct) <- colnames(obj)
names(readMap) <- colnames(obj)
names(readAll) <- colnames(obj)
# Add metadata to object
obj <- AddMetaData(obj, logtotreads, "Log.TotReads")
obj <- AddMetaData(obj, readExonMapPct, "ExonvMapped")
obj <- AddMetaData(obj, readExonPct, "ExonvTotal")
obj <- AddMetaData(obj, readMap, "reads.mapped")
obj <- AddMetaData(obj, readAll, "reads.Total")
# Calculate complexity and add to metadata
comp=obj@meta.data$ExonReads/obj@meta.data$nCount_RNA
names(comp)<-rownames(obj@meta.data)
obj <- AddMetaData(obj, comp, "Complexity")
# Add group and groupSamp
obj$group <- group_name
obj$groupSamp <- paste(group_name, sample, sep = "_")
return(obj)
}
# Make Seurat objects for each sample
# This may take awhile if you have many samples
seurat_list <- purrr::map2(sampleslist, groupslist,
~ generate_seurat_object(sample = .x,
group_name = .y))
# If more than one sample, merge individual objects into a final Seurat object
if(length(seurat_list) > 1) {
obj <- merge(x = seurat_list[[1]],
y = seurat_list[2:length(seurat_list)],
add.cell.ids = sampleslist)
} else {
obj <- seurat_list[[1]]
}
#Remove seurat list to clear up memory
remove(seurat_list)
## determine how many cells are recovered before filtering
ncol(obj)
## filter features that have less than 300 genes and 600 unique transcript molecules
nGeneI=300
nTranI=600
obj <- subset(obj, subset = nFeature_RNA > nGeneI & nCount_RNA > nTranI)
## determine how many cells are recovered after filtering
ncol(obj)
library(ggplot2)
## add mitochondrial content
## (This will be dependent on what mitochondrial gene names are for your particular reference genome)
obj[["percent.mito"]] <- PercentageFeatureSet(obj, pattern = "^MT-")
mito.genes <- grep("^MT\\.", rownames(obj@assays$RNA), value = T)
mito.genes <- c(mito.genes, grep("^MT-", rownames(obj@assays$RNA), value = T))
## plot the QC metrics in a violin plot
VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"),
pt.size = 0, ncol = 3) +
theme(axis.title.x = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
## plot scatter QC
plot1 <- FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "percent.mito") +
theme(axis.text.x = element_text(angle = 90))
plot2 <- FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") +
theme(axis.text.x = element_text(angle = 90))
plot1 + plot2
# Load Total read info
totReads.df<- NULL
for (sample in sampleslist){
sampleqcinfo<- read.table(samplesFile[grep(sample,samplesFile)], sep = "\t")
specs<- sampleqcinfo$V1
totReads.df <- as.data.frame(cbind(totReads.df,sampleqcinfo[,2]))
row.names(totReads.df) <- specs
}
colnames(totReads.df)<- sampleslist
qc_metrics_sample<- function(obj){
I=obj@meta.data$orig.ident
Reads=obj@meta.data$ExonReads
ReadsM=obj@meta.data$reads.mapped
ReadsT=obj@meta.data$reads.Total
trans=obj@meta.data$nCount_RNA
Genes=obj@meta.data$nFeature_RNA
Mito=obj@meta.data$percent.mito
Complexity=obj@meta.data$Complexity
nSamples=length(sampleslist)
readEC=vector(mode="double",length=nSamples)
readsTot=totReads.df
readsTotalSamples=colnames(readsTot)
names(readEC)=sampleslist
readTC=readEC
readMC=readEC
transC=readEC
geneC=readEC
mitoC=readEC
nCells=readEC
compl=readEC
readsCellTotal=readEC
readsSampleTotal=readEC
FracCellReads=readEC
readsSampleMapped=readEC
readsSampleFiltered=readEC
readsSampleExon=readEC
percExon=readEC
percFilt=readEC
nF=readEC
r=readEC
v1=readEC
v2=readEC
v3=readEC
date=readEC
sT=readEC
DS=readEC
G=readEC
T=readEC
BC=readEC
seqsat=readEC
sampleName=readEC
sampleGroup=readEC
for (x in 1:nSamples) {
readTC[x]=median(ReadsT[is.na(match(I,sampleslist[x]))==0])
readEC[x]=median(Reads[is.na(match(I,sampleslist[x]))==0])
readMC[x]=median(ReadsM[is.na(match(I,sampleslist[x]))==0])
transC[x]=median(trans[is.na(match(I,sampleslist[x]))==0])
geneC[x]=median(Genes[is.na(match(I,sampleslist[x]))==0])
mitoC[x]=median(Mito[is.na(match(I,sampleslist[x]))==0])
compl[x]=median(Complexity[is.na(match(I,sampleslist[x]))==0])
nCells[x]=sum(is.na(match(I,sampleslist[x]))==0)
readsCellTotal[x]=sum(ReadsT[is.na(match(I,sampleslist[x]))==0])
sampleName[x]=sampleslist[x]
sampleGroup[x]=groupslist[x]
readsSampleTotal[x]=readsTot[1,is.na(match(readsTotalSamples,sampleslist[x]))==0]
FracCellReads[x]=readsCellTotal[x]/readsSampleTotal[x]
readsSampleMapped[x]=readsTot[3,is.na(match(readsTotalSamples,sampleslist[x]))==0]
readsSampleFiltered[x]=readsTot[2,is.na(match(readsTotalSamples,sampleslist[x]))==0]
readsSampleExon[x]=readsTot[4,is.na(match(readsTotalSamples,sampleslist[x]))==0]
percExon[x]=readEC[x]/readTC[x]*100
percFilt[x]=readsSampleFiltered[x]/readsSampleTotal[x]
date[x]=gsub("-","",Sys.Date())
G[x]=nGeneI
T[x]=nTranI
seqsat[x]=1-(sum(trans[is.na(match(I,sampleslist[x]))==0] / sum(ReadsM[is.na(match(I,sampleslist[x]))==0])))
}
clustInfo=data.frame(date,sampleName,sampleGroup,G, T, readTC,
readMC,readEC,transC,geneC,mitoC,nCells,
compl,readsSampleTotal,readsSampleFiltered,
readsSampleMapped,readsSampleExon,readsCellTotal,
FracCellReads,percExon,percFilt, seqsat)
colnames(clustInfo)=c("AnalysisDate", "SampleID", "Group", "GeneThreshold",
"TranscriptThreshold", "TotalReads", "MappedReads",
"ExonReads", "nTrans", "nGenes", "percMito" ,"nCells",
"Complexity",  "SampleTotalReads", "SampleFilteredReads",
"SampleMappedReads", "SampleExonReads", "HQCellsTotalReads",
"FracReadsHQCells", "PctExon", "FracPassFilter", "SeqSat")
write.table(clustInfo,"SamplesMetrics.txt",sep="\t",col.names=NA)
return(clustInfo)
}
sample_metrics<- qc_metrics_sample(obj)
datatable(sample_metrics)
colors=rep(c("#ED7D30","#0058D4", "#7D3C98", "#F4D03F", "#16A085", "#721236",
"#A0CBE8", "#FFBE7D", "#59A14F", "#FF9D9A", "#79706E", "#8CD17D",
"#499894", "#BAB0AC", "#D37295", "#FABFD2", "#B07AA1"),5)
p <- ggplot(sample_metrics, aes(Group, SampleTotalReads)) +
ggtitle("Total Sample Reads by Group")
# calculate axis limits for plots
d=floor(log(max(sample_metrics$SampleTotalReads),10))
yL=ceiling(max(sample_metrics$SampleTotalReads)/10^d)*10^d
p + geom_boxplot(outlier.shape = NA, aes(fill = Group) ) +
scale_fill_manual(values=colors) +
geom_jitter(width = 0.2) +
ylim(c(0,yL))
p <- ggplot(sample_metrics, aes(Group, FracPassFilter)) +
ggtitle("Frac Reads Pass Filter by Group")
p + geom_boxplot(outlier.shape = NA, aes(fill = Group) ) +
scale_fill_manual(values=colors) +
geom_jitter(width = 0.2) +
ylim(c(0,1))
p <- ggplot(sample_metrics, aes(Group, PctExon)) +
ggtitle("% Exon Reads by Group")
p + geom_boxplot(outlier.shape = NA, aes(fill = Group) ) +
scale_fill_manual(values=colors) +
geom_jitter(width = 0.2) +
ylim(c(0,100))
p <- ggplot(sample_metrics, aes(Group, ExonReads)) +
ggtitle("Median Exon Reads per Cell by Group")
# calculate axis limits for plots
d=floor(log(max(sample_metrics$ExonReads),10))
yL=ceiling(max(sample_metrics$ExonReads)/10^d)*10^d
p + geom_boxplot(outlier.shape = NA, aes(fill = Group) ) +
scale_fill_manual(values=colors) +
geom_jitter(width = 0.2) +
ylim(c(0,yL))
p <- ggplot(sample_metrics, aes(Group, Complexity)) +
ggtitle("Complexity (Exon Reads/Transcript) by Group")
# calculate axis limits for plots
yL=5*ceiling(max(sample_metrics$Complexity)/5)
p + geom_boxplot(outlier.shape = NA, aes(fill = Group) ) +
scale_fill_manual(values=colors) +
geom_jitter(width = 0.2) +
ylim(c(0,yL))
p <- ggplot(sample_metrics, aes(Group, TotalReads)) +
ggtitle("Median Total Reads per Cell by Group")
# calculate axis limits for plots
d=floor(log(max(sample_metrics$TotalReads),10))
yL=ceiling(max(sample_metrics$TotalReads)/10^d)*10^d
p + geom_boxplot(outlier.shape = NA, aes(fill = Group) ) +
scale_fill_manual(values=colors) +
geom_jitter(width = 0.2) +
ylim(c(0,yL))
p <- ggplot(sample_metrics, aes(Group, SeqSat)) +
ggtitle("Sequencing Saturation by Group")
yL=100
p + geom_boxplot(outlier.shape = NA, aes(fill = Group) ) +
scale_fill_manual(values=colors) +
ylim(c(0,1))
p <- ggplot(sample_metrics, aes(Group, nCells)) +
ggtitle("Cells Recovered by Group (Remember- Multiply by 8 to get stats for full HIVE!)")
# calculate axis limits for plots
yL=500*ceiling(max(sample_metrics$nCells/500))
# Set the working directory
setwd("/media/asus/275dd380-2319-4638-bcdd-5f65b2b1d4b5/CHRF_Project_Data/Single_Cell/Honeycomb_Biotechnologies/Data_Analysis/3_Additional_Analysis_Resources/4_Seurat_Analysis_Tutorial")
# Source the local R script files
source("sc-type/R/gene_sets_prepare.R")
source("sc-type/R/sctype_score_.R")
source("sc-type/R/auto_detect_tissue_type.R")
# Scale the data in the Seurat object
obj <- ScaleData(obj, features = rownames(obj@assays$RNA))
# Load the marker genes and predict the dataset's tissue type
db_ = "./ScTypeDB_full.xlsx"
tissue_guess = auto_detect_tissue_type(path_to_db_file = db_,
seuratObject = obj,
scaled = TRUE,
assay = "RNA")
suppressPackageStartupMessages({
library(tidyverse)
library(patchwork)
library(plyr)
library(Seurat)
library(UCell)
library(ggpubr)
library(SingleCellExperiment)
library(scuttle)
# library(celldex)
library(DT)
library(scales)
library(HGNChelper)
library(openxlsx)
library(HGNChelper)
})
# Set the working directory
setwd("/media/asus/275dd380-2319-4638-bcdd-5f65b2b1d4b5/CHRF_Project_Data/Single_Cell/Honeycomb_Biotechnologies/Data_Analysis/3_Additional_Analysis_Resources/4_Seurat_Analysis_Tutorial")
# Source the local R script files
source("sc-type/R/gene_sets_prepare.R")
source("sc-type/R/sctype_score_.R")
source("sc-type/R/auto_detect_tissue_type.R")
# Scale the data in the Seurat object
obj <- ScaleData(obj, features = rownames(obj@assays$RNA))
# Load the marker genes and predict the dataset's tissue type
db_ = "./ScTypeDB_full.xlsx"
tissue_guess = auto_detect_tissue_type(path_to_db_file = db_,
seuratObject = obj,
scaled = TRUE,
assay = "RNA")
