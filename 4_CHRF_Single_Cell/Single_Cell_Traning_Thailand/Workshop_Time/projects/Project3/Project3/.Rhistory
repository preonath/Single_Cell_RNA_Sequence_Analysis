length(which(clono$frequency<=1))
## Load libraries and set user directory paths.
```{r setup, include=FALSE}
library(dplyr)
library(Seurat)
library(patchwork)
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# UPDATE scw01 DIRECTORY TO MATCH YOUR PERSONAL USER DIRECTORY. THIS IS WHERE YOU READ AND WRITE DATA.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
mydir <- "/home1/scw01/"
#counts <- Read10X_h5(paste0(mydir, "/20210220_NasalSwab_RawCounts_filtered.rds"))
counts <- Read10X("/Users/adamrubin/Documents/Regev_lab/HCA_Ghana/NSLC_10x/filtered_feature_bc_matrix/")
seurat.raw <- CreateSeuratObject(
counts = counts,
#meta.data = metadata,
project = "tcr",
min.cells = 0,
min.features = 0
)
# Show the contents of Seurat object.
seurat.raw
# How many cells and genes do we currently have?
print(paste0("The number of genes is ", dim(seurat.raw)[1], " and the number of cells is ", dim(seurat.raw)[2]))
# View a slice of the count data. Rows are genes and columns are cells/barcodes.
GetAssayData(seurat.raw, slot = "counts")[8:10,13:14]
# What metadata columns are available in the Seurat object?
print(colnames(seurat.raw@meta.data))
# Create a violin plot showing the distribution of number of UMIs per cell.
options(repr.plot.width=7, repr.plot.height=7)
VlnPlot(seurat.raw, features = c("nCount_RNA"),y.max=2e4)
# Human mitochondrial gene names start with "MT-" so we'll calculate the percentage of genes matching the pattern "^MT-".
seurat.raw[["percent.mt"]] <- PercentageFeatureSet(seurat.raw, pattern = "^MT-")
# Now we can see that the % mitochondrial gene expression has been calculated for each cell.
head(seurat.raw$percent.mt)
# We can visualize all three of the cell quality metrics together using Seurat's VlnPlot method.
options(repr.plot.width=12, repr.plot.height=6)
VlnPlot(seurat.raw, features = c("nCount_RNA", "nFeature_RNA", "percent.mt"))
# We can visualize all three of the cell quality metrics together using Seurat's VlnPlot method.
options(repr.plot.width=12, repr.plot.height=6)
VlnPlot(seurat.raw, features = c("nCount_RNA", "nFeature_RNA", "percent.mt"))
# Here we visualize the number of UMI vs the percentage of mito genes.
options(repr.plot.width=6, repr.plot.height=6)
FeatureScatter(seurat.raw, feature1 = "nCount_RNA", feature2 = "percent.mt")
# Once we've visualized the metrics we can select the thresholds that we want to use to filter.
# We use R's subset method to filter
seurat.raw <- subset(
seurat.raw,
subset =
nFeature_RNA > 200 &
nCount_RNA > 400 &
nFeature_RNA < 6000 &
percent.mt < 40
)
seurat.raw <- NormalizeData(seurat.raw, normalization.method = "LogNormalize", scale.factor = 10000)
?FindVariableFeatures
seurat.raw <- FindVariableFeatures(seurat.raw, selection.method = "vst", nfeatures = 2000)
seurat.raw <- ScaleData(seurat.raw, features = VariableFeatures(seurat.raw), do.scale = T, do.center = T)
seurat.raw <- RunPCA(seurat.raw, features = VariableFeatures(seurat.raw))
seurat.raw <- FindNeighbors(seurat.raw, dims = 1:20, k.param = 20)
seurat.raw <- RunUMAP(seurat.raw, dims = 1:20, reduction = "pca", seed.use = 1)
# Use a low resolution so that we can easily identify all of the T cells later
seurat.raw <- FindClusters(seurat.raw, resolution = 0.1)
DimPlot(seurat.raw, reduction = "umap", label = T,group.by = "seurat_cluster")
head(seurat.raw@meta.data)
DimPlot(seurat.raw, reduction = "umap", label = T,group.by = "seurat_clusters")
# Look at the feature plot of common cell type markers to figure out which cluster is T cells
# T cell genes: CD3D, CD8A, GNLY
# B cell gene: CD79A
# Myeloid cell gene: FCGR3A
# Epithelial (lung) cell gene: EGFR
FeaturePlot(seurat.raw, features = c("CD3D", "CD8A", "GNLY", "CD79A", "FCGR3A","KRT7"), min.cutoff = "q1")
?paste0
tcr_folder = "/Users/adamrubin/Documents/Regev_lab/HCA_Ghana/NSLC_10x/"
# Read in TCR information for each cell
tcr <- read.csv(paste(tcr_folder,"vdj_v1_hs_nsclc_multi_5gex_t_b_vdj_t_all_contig_annotations.csv", sep=""))
# Read in clonotype  info (remember many cells can share the same clonotype, or TCR sequence)
clono <- read.csv(paste(tcr_folder,"vdj_v1_hs_nsclc_multi_5gex_t_b_vdj_t_clonotypes.csv", sep=""))
# Remove the -1 at the end of each barcode.
# Subsets so only the first line of each cell barcode is kept, so that we ony analyze one clonotype for each cell.
tcr$barcode <- gsub("-1", "", tcr$barcode)
tcr <- tcr[!duplicated(tcr$barcode), ]
# Also remove the -1 at the end of the line of the Seurat object
seurat.raw = RenameCells(seurat.raw,new.names = gsub("-1", "", colnames(seurat.raw)))
# Only keep the barcode and clonotype columns. Adjust the name from "raw_clonotype_id" to "clonotype_id" so
tcr <- tcr[,c("barcode", "raw_clonotype_id")]
names(tcr)[names(tcr) == "raw_clonotype_id"] <- "clonotype_id"
# Merge the TCR and clonotype tables so we have TCR amino acid sequence for each cell
tcr <- merge(tcr, clono[, c("clonotype_id", "cdr3s_aa")])
# Reorder so barcodes are first column, set them as rownames, and remove the unnecessary extra column of barcodes
tcr <- tcr[, c(2,1,3)]
rownames(tcr) <- tcr[,1]
tcr[,1] <- NULL
# Add to the Seurat object's metadata.
seurat.raw <- AddMetaData(object=seurat.raw, metadata=tcr)
# Confirm we have TCR information in the metadata
head(seurat.raw@meta.data)
# Generate a gistogram of clone frequencies from clono table
# What is a good threshold to distinguish expanded from non-expanded clones?
barplot(table(clono$frequency),xlab="Number of cells in clone")
length(which(clono$frequency>1))
length(which(clono$frequency>1))
expanded_clones = clono$clonotype_id[clono$frequency>1]
# Add a new metadata column indicating which cells are part of an expanded clone
seurat.raw = AddMetaData(seurat.raw,metadata = rep("no",ncol(seurat.raw)),col.name="TCR_expanded")
seurat.raw@meta.data$TCR_expanded[seurat.raw@meta.data$clonotype_id %in% expanded_clones] = "yes"
# Look at the UMAP to see if expanded clones have similar gene expression
DimPlot(seurat.raw, reduction = "umap", group.by = "TCR_expanded", label = T)
Idents(seurat.raw) = "seurat_clusters"
seurat.t = subset(seurat.raw, idents = "1")
seurat.t # Check the number of samples (cells) to see how many T cells we have to work with
deg_expanded = FindMarkers(seurat.t,ident.1="yes",ident.2="no",logfc.threshold = 0.25,min.pct = 0.1)
seurat.raw@meta.data$TCR_expanded[seurat.raw@meta.data$clonotype_id %in% expanded_clones] = "yes"
Idents(seurat.raw) = "seurat_clusters"
seurat.t = subset(seurat.raw, idents = "1")
seurat.t # Check the number of samples (cells) to see how many T cells we have to work with
Idents(seurat.t) = "TCR_expanded"
deg_expanded = FindMarkers(seurat.t,ident.1="yes",ident.2="no",logfc.threshold = 0.25,min.pct = 0.1)
# Visualize the expression of the top DE genes for each annotated cell subset.
top30genes <- deg_expanded %>% filter(avg_log2FC > 0) %>% top_n(30, avg_log2FC)
genes <- top30genes$gene
seurat.t <- ScaleData(seurat.t, features = genes, do.center = T, do.scale = T)
genes
top30genes
genes <- rownames(top30genes)
genes
seurat.t <- ScaleData(seurat.t, features = genes, do.center = T, do.scale = T)
DoHeatmap(seurat.t, features = genes)
library(dplyr)
library(Seurat)
library(patchwork)
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# UPDATE scw01 DIRECTORY TO MATCH YOUR PERSONAL USER DIRECTORY. THIS IS WHERE YOU READ AND WRITE DATA.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#mydir <- "/home1/scw01/"
mydir <- "/Users/adamrubin/Library/CloudStorage/Dropbox/computational/HCA/Seurat_CITE/"
# Note that this dataset also contains ~5% of mouse cells, which we can use as negative
# controls for the protein measurements. For this reason, the gene expression matrix has
# HUMAN_ or MOUSE_ appended to the beginning of each gene.
cbmc.rna <- as.sparse(read.csv(file = paste0(mydir,"/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz"),
header = TRUE, row.names = 1))
# Note that this dataset also contains ~5% of mouse cells, which we can use as negative
# controls for the protein measurements. For this reason, the gene expression matrix has
# HUMAN_ or MOUSE_ appended to the beginning of each gene.
cbmc.rna <- as.sparse(read.csv(file = paste0(mydir,"GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz"),
header = TRUE, row.names = 1))
paste0(mydir,"GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz")
cbmc.rna <- as.sparse(read.csv(file = paste0(mydir,"GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz"),sep=",",
header = TRUE, row.names = 1))
paste0(mydir,"GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz")
# Load in the ADT UMI matrix
cbmc.adt <- <- as.sparse(read.csv(file = paste0(mydir,"GSE100866_CBMC_8K_13AB_10X-ADT_umi.csv.gz"),sep=",",
# Load in the ADT UMI matrix
cbmc.adt <- as.sparse(read.csv(file = paste0(mydir,"GSE100866_CBMC_8K_13AB_10X-ADT_umi.csv.gz"),sep=",",
header = TRUE, row.names = 1))
# Note that this dataset also contains ~5% of mouse cells, which we can use as negative
# controls for the protein measurements. For this reason, the gene expression matrix has
# HUMAN_ or MOUSE_ appended to the beginning of each gene.
cbmc.rna <- as.sparse(read.csv(file = paste0(mydir,"GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz"),sep=",",
header = TRUE, row.names = 1))
require(gplots)
require(RColorBrewer)
library(Seurat)
library(dplyr)
library(Matrix)
library(ggplot2)
load("/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc.Robj")
merge12pts_tc
dim(merge12pts_tc@meta.data)
head(merge12pts_tc@meta.data)
Idents(merge12pts_tc) = "res.0.8"
merge12pts_tc
scc_tc = UpdateSeuratObject(merge12pts_tc)
saveRDS(scc_tc,"/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.Robj")
Idents(scc_tc) = "res.0.8"
scc_tc
DimPlot(scc_tc, reduction = "tsne", group.by = "res.0.8", label = T)
DimPlot(scc_tc, reduction = "tsne", group.by = "patient", label = T)
DimPlot(scc_tc, reduction = "tsne", group.by = "tum.norm", label = T)
FeaturePlot(scc_tc, features = c("CD3D", "CD8A", "GNLY", "CD79A", "FCGR3A","KRT7"), min.cutoff = "q1")
dim(scc_tc@raw.data)
dim(scc_tc@raw
)
dim(scc_tc[['RNA']]@counts)
dim(scc_tc[['RNA']]@raw)
dim(scc_tc[['RNA']]@data)
load("/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.Robj")
saveRDS(scc_tc,"/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.Rdata")
colnames(scc_tc)
load("/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.Rdata")
scc_tc
saveRDS(scc_tc,"/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.Rds")
load("/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.Rds")
saveRDS(scc_tc,"/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.rds")
load("/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.rds")
?saveRDS
?UpdateSeuratObject
# Export matrix and metadata to make new object
write.table(as.matrix(GetAssayData(object = scc_tc, slot = "counts")),
"/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_counts.csv",
sep = ',', row.names = T, col.names = T, quote = F)
?ReadMtx
scc_tc
Version(scc_tc)
load("/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.rds")
save(scc_tc,"/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.RData")
save(scc_tc,file="/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.RData")
load("/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_SeuratV3.Rdata")
scc_tc
dim(scc_tc[['RNA']]@raw)
dim(scc_tc[['RNA']]@counts)
dim(scc_tc[['RNA']]@data)
scc_tc[['RNA']]@counts[1:10,1:10]
scc_tc[['RNA']]@counts[1:10,1:50]
scc_tc[['RNA']]@counts[1:30,1:40]
scc_tc[['RNA']]@daa[1:30,1:40]
scc_tc[['RNA']]@data[1:30,1:40]
scc_tc[['RNA']]@data <- NULL
write.table(as.matrix(GetAssayData(object = scc_tc, slot = "counts")),
"/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_counts.csv",
sep = ',', row.names = T, col.names = T, quote = F)
dim(scc_tc@meta.data)
write.table(scc_tc@meta.data,"/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_metadata.csv",
sep=",",row.names=T,col.names=T,quote=F)
scc_tc.rna_mat <- as.sparse(read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_counts.csv.gz", sep = ",",
header = TRUE, row.names = 1))
scc_tc.metaata_mat <- read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_metadata.csv", sep = ",",
header = TRUE, row.names = 1)
mode(scc_tc.metaata_mat)
head(scc_tc.metaata_mat)
?CreateSeuratObject
scc_tc.new = CreateSeuratObject(
counts = scc_tc.rna_mat,
meta.data = scc_tc.metaata_mat
)
scc_tc.new
scc_tc.new[['RNA']]@counts[1:40,1:40]
head(scc_tc.new@meta.data)
scc_tc.rna_mat <- as.sparse(read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_counts.csv.gz", sep = ",",
header = TRUE, row.names = 1))
scc_tc.metaata_mat <- read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_metadata.csv", sep = ",",
header = TRUE, row.names = 1)
scc_tc = CreateSeuratObject(
counts = scc_tc.rna_mat,
meta.data = scc_tc.metaata_mat
)
scc_tc[['RNA']]@counts[1:40,1:40]
head(scc_tcw@meta.data)
head(scc_tc@meta.data)
VlnPlot(seurat.raw, features = c("nCount_RNA"),y.max=5e4)
VlnPlot(scc_tc, features = c("nCount_RNA"),y.max=5e4)
head(scc_tc@meta.data)
# Early processing
Idents(scc_tc) = "tum.norm"
VlnPlot(scc_tc, features = c("nCount_RNA"),y.max=5e4)
scc_tc[["percent.mt"]] <- PercentageFeatureSet(scc_tc, pattern = "^MT-")
VlnPlot(scc_tc, features = c("nCount_RNA", "nFeature_RNA", "percent.mt"))
scc_tc <- NormalizeData(scc_tc, normalization.method = "LogNormalize", scale.factor = 10000)
scc_tc <- FindVariableFeatures(scc_tc, selection.method = "vst", nfeatures = 2000)
scc_tc <- ScaleData(scc_tc, features = VariableFeatures(scc_tc), do.scale = T, do.center = T)
scc_tc <- RunPCA(scc_tc, features = VariableFeatures(scc_tc))
scc_tc <- FindNeighbors(scc_tc, dims = 1:20, k.param = 20)
scc_tc <- RunUMAP(scc_tc, dims = 1:20, reduction = "pca", seed.use = 1)
# Find clusters and use a low resolution (0.1 is a good start) so that we can easily identify all of the T cells later
scc_tc <- FindClusters(scc_tc, resolution = 0.1)
DimPlot(scc_tc, reduction = "umap", label = T,group.by = "seurat_clusters")
DimPlot(scc_tc, reduction = "umap", label = T, group.by = "patient")
DimPlot(scc_tc, reduction = "umap", label = T, group.by = "tum.norm")
FeaturePlot(scc_tc, features = c("CD3D", "CD8A", "GNLY", "CD79A", "FCGR3A","KRT7"), min.cutoff = "q1")
# Check naive markers
gene_set1 = c("CD247","CD3D","CD3E","CD3G","CD4","CD8A","CD8B","FOXP3","TCF7","SELL","LEF1","CCR7")
FeaturePlot(scc_tc, features = gene_set1, min.cutoff = "q1")
# Check exhaustion markers
gene_set1 = c("CD4","CD8A","CD8B","FOXP3","PDCD1","CTLA4","LAG3","TIGIT","HAVCR2","LAYN")
FeaturePlot(scc_tc, features = gene_set1, min.cutoff = "q1")
Idents(scc_tc) = "seurat_clusters"
DoHeatmap(object = scc_tc, genes.use = gene_set1, slim.col.label = TRUE, remove.key = F,use.scale=F)
DoHeatmap(object = scc_tc, genes.use = gene_set1, slim.col.label = TRUE, remove.key = F,use.scale=F)
DoHeatmap(object = scc_tc, genes.use = gene_set1, remove.key = F,use.scale=F)
?DoHeatmap
DoHeatmap(object = scc_tc, features = gene_set1)
# Check cycling markers
gene_set1 = c("CD4","CD8A","CD8B","FOXP3","MKI67","AURKA","AURKB")
DoHeatmap(object = scc_tc, features = gene_set1)
# Check major subtype and cycling markers
gene_set1 = c("CD4","CD8A","CD8B","FOXP3","MKI67","AURKA","AURKB")
DoHeatmap(object = scc_tc, features = gene_set1)
Idents(scc_tc) = "seurat_clusters"
deg1 = FindMarkers(scc_ts,ident.1="0",ident.2="1")
deg1 = FindMarkers(scc_tc,ident.1="0",ident.2="1")
head(deg1)
?FindMarkers
deg2 = FindMarkers(scc_tc, ident.1 = "Tumor", ident.2 = "Normal")
Idents(scc_tc) = "tum.norm"
deg2 = FindMarkers(scc_tc, ident.1 = "Tumor", ident.2 = "Normal")
dim(deg2)
head(deg2)
?WhichCells
DimPlot(scc_tc, reduction = "umap", label = T, group.by = "seurat_clusters")
DimPlot(scc_tc, reduction = "umap", label = T, group.by = "tum.norm")
scc_tc.subset = SubsetData(scc_tc, cell.use = WhichCells(scc_tc, ident = 2))
scc_tc.subset = subset(scc_tc, idents = "2")
Idents(scc_tc) = "seurat_clusters"
scc_tc.subset = subset(scc_tc, idents = "2")
scc_tc.subset
Idents(scc_tc.subset) = "tum.norm"
deg2 = FindMarkers(scc_tc.subset, ident.1 = "Tumor", ident.2 = "Normal")
dim(deg2)
head(deg2)
# Proportion of cells from each sample?
prop.table(x=table(scc_tc@ident))
head(Idents(scc_tc))
# Proportion of cells from each sample?
prop.table(x=table(Idents(scc_tc)))
freq_table <- prop.table(x = table(Idents(scc_tc), scc_tc@meta.data$patient]), margin = 2)
freq_table <- prop.table(x = table(Idents(scc_tc), scc_tc@meta.data$patient), margin = 2)
freq_table
barplot(freq_table,col=c("red","blue","darkgreen","purple","orange","gray","yellow"),legend=rownames(freq_table))
scc_tc.markers <- FindAllMarkers(object = scc_tc, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25)
dim(scc_tc.markers)
head(scc_tc.markers)
scc_tc
head(scc_ts@meta.data)
head(scc_tc@meta.data)
mydir <- "/Users/adamrubin/Library/CloudStorage/Dropbox/computational/HCA/"
# Note that this dataset also contains ~5% of mouse cells, which we can use as negative
# controls for the protein measurements. For this reason, the gene expression matrix has
# HUMAN_ or MOUSE_ appended to the beginning of each gene.
cbmc.rna <- as.sparse(read.csv(file = paste0(mydir,"Seurat_CITE/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz"),sep=",",
header = TRUE, row.names = 1))
# To make life a bit easier going forward, we're going to discard all but the top 100 most
# highly expressed mouse genes, and remove the 'HUMAN_' from the CITE-seq prefix
cbmc.rna <- CollapseSpeciesExpressionMatrix(cbmc.rna)
# Load in the ADT UMI matrix
cbmc.adt <- as.sparse(read.csv(file = paste0(mydir,"Seurat_CITE/GSE100866_CBMC_8K_13AB_10X-ADT_umi.csv.gz"),sep=",",
header = TRUE, row.names = 1))
# Note that since measurements were made in the same cells, the two matrices have identical
# column names
all.equal(colnames(cbmc.rna), colnames(cbmc.adt))
# creates a Seurat object based on the scRNA-seq data
cbmc <- CreateSeuratObject(counts = cbmc.rna)
# We can see that by default, the cbmc object contains an assay storing RNA measurement
Assays(cbmc)
# create a new assay to store ADT information
adt_assay <- CreateAssayObject(counts = cbmc.adt)
# add this assay to the previously created Seurat object
cbmc[["ADT"]] <- adt_assay
# Validate that the object now contains multiple assays
Assays(cbmc)
# Extract a list of features measured in the ADT assay
rownames(cbmc[["ADT"]])
# List the current default assay
DefaultAssay(cbmc)
# Switch the default to ADT
DefaultAssay(cbmc) <- "ADT"
DefaultAssay(cbmc)
# Note that all operations below are performed on the RNA assay Set and verify that the
# default assay is RNA
DefaultAssay(cbmc) <- "RNA"
DefaultAssay(cbmc)
# perform visualization and clustering steps
cbmc <- NormalizeData(cbmc)
cbmc <- FindVariableFeatures(cbmc)
cbmc <- ScaleData(cbmc)
cbmc <- RunPCA(cbmc, verbose = FALSE)
cbmc <- FindNeighbors(cbmc, dims = 1:30)
cbmc <- FindClusters(cbmc, resolution = 0.8, verbose = FALSE)
cbmc <- RunUMAP(cbmc, dims = 1:30)
DimPlot(cbmc, label = TRUE)
# Normalize ADT data,
DefaultAssay(cbmc) <- "ADT"
cbmc <- NormalizeData(cbmc, normalization.method = "CLR", margin = 2)
DefaultAssay(cbmc) <- "RNA"
# Now, we will visualize CD14 levels for RNA and protein By setting the default assay, we can
# visualize one or the other
DefaultAssay(cbmc) <- "ADT"
p1 <- FeaturePlot(cbmc, "CD19", cols = c("lightgrey", "darkgreen")) + ggtitle("CD19 protein")
DefaultAssay(cbmc) <- "RNA"
p2 <- FeaturePlot(cbmc, "CD19") + ggtitle("CD19 RNA")
# place plots side-by-side
p1 | p2
# Alternately, we can use specific assay keys to specify a specific modality Identify the key
# for the RNA and protein assays
Key(cbmc[["RNA"]])
Key(cbmc[["ADT"]])
# Now, we can include the key in the feature name, which overrides the default assay
p1 <- FeaturePlot(cbmc, "adt_CD19", cols = c("lightgrey", "darkgreen")) + ggtitle("CD19 protein")
p2 <- FeaturePlot(cbmc, "rna_CD19") + ggtitle("CD19 RNA")
p1 | p2
# as we know that CD19 is a B cell marker, we can identify cluster 6 as expressing CD19 on the
# surface
VlnPlot(cbmc, "adt_CD19")
# we can also identify alternative protein and RNA markers for this cluster through
# differential expression
adt_markers <- FindMarkers(cbmc, ident.1 = 6, assay = "ADT")
rna_markers <- FindMarkers(cbmc, ident.1 = 6, assay = "RNA")
rna_markers <- FindMarkers(cbmc, ident.1 = 6, assay = "RNA")
head(adt_markers)
head(adt_markers)
head(rna_markers)
# Draw ADT scatter plots (like biaxial plots for FACS). Note that you can even 'gate' cells if
# desired by using HoverLocator and FeatureLocator
FeatureScatter(cbmc, feature1 = "adt_CD19", feature2 = "adt_CD3")
# view relationship between protein and RNA
FeatureScatter(cbmc, feature1 = "adt_CD3", feature2 = "rna_CD3E")
# 2023/03/10
# HCA workshop on single-cell genomics
setwd("/Users/adamrubin/Dropbox/Lab/SCC/scRNA_analyis")
setwd("/Users/adamrubin/Dropbox/Lab/SCC/scRNA_analyis")
require(gplots)
require(RColorBrewer)
library(Seurat)
library(dplyr)
library(Matrix)
library(ggplot2)
scc_tc.rna_mat <- as.sparse(read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_counts.csv.gz", sep = ",",
header = TRUE, row.names = 1))
scc_tc.metaata_mat <- read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_metadata.csv", sep = ",",
header = TRUE, row.names = 1)
scc_tc = CreateSeuratObject(
counts = scc_tc.rna_mat,
meta.data = scc_tc.metaata_mat
)
scc_tc[['RNA']]@counts[1:40,1:40]
head(scc_tc@meta.data)
scc_tc.metaata_mat <- read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_metadata.csv", sep = ",",
header = TRUE, row.names = 1)
scc_tc = CreateSeuratObject(
counts = scc_tc.rna_mat,
meta.data = scc_tc.metaata_mat
)
# Check that the data was loaded properly
scc_tc[['RNA']]@counts[1:40,1:40]
head(scc_tc@meta.data)
scc_tc.rna_mat <- as.sparse(read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_counts.csv.gz", sep = ",",
header = TRUE, row.names = 1))
scc_tc.metaata_mat <- read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_metadata.csv", sep = ",",
header = TRUE, row.names = 1)
dim(scc_tc.metaata_mat)
head(scc_tc.metaata_mat)
scc_tc.metaata_mat <- read.csv(file =  "/Users/adamrubin/Documents/Khavari_lab/SCC/merge12ptsnew_tc_metadata.csv", sep = ",",
header = TRUE, row.names = 1)
scc_tc = CreateSeuratObject(
counts = scc_tc.rna_mat,
meta.data = scc_tc.metaata_mat
)
head(scc_tc@meta.data)
# Early processing
Idents(scc_tc) = "tum.norm"
VlnPlot(scc_tc, features = c("nCount_RNA"),y.max=5e4)
scc_tc[["percent.mt"]] <- PercentageFeatureSet(scc_tc, pattern = "^MT-")
VlnPlot(scc_tc, features = c("nCount_RNA", "nFeature_RNA", "percent.mt"))
scc_tc <- NormalizeData(scc_tc, normalization.method = "LogNormalize", scale.factor = 10000)
scc_tc <- FindVariableFeatures(scc_tc, selection.method = "vst", nfeatures = 2000)
scc_tc <- ScaleData(scc_tc, features = VariableFeatures(scc_tc), do.scale = T, do.center = T)
scc_tc <- RunPCA(scc_tc, features = VariableFeatures(scc_tc))
scc_tc <- FindNeighbors(scc_tc, dims = 1:20, k.param = 20)
scc_tc <- RunUMAP(scc_tc, dims = 1:20, reduction = "pca", seed.use = 1)
# Find clusters and use a low resolution (0.1 is a good start) so that we can easily identify all of the T cells later
scc_tc <- FindClusters(scc_tc, resolution = 0.1)
# Do you need to perform batch correction?
DimPlot(scc_tc, reduction = "umap", label = T, group.by = "seurat_clusters")
DimPlot(scc_tc, reduction = "umap", label = T, group.by = "patient")
DimPlot(scc_tc, reduction = "umap", label = T, group.by = "tum.norm")
# Do you need to perform batch correction?
DimPlot(scc_tc, reduction = "umap", label = T, group.by = "seurat_clusters")
# Check major subtype and cycling markers
gene_set1 = c("CD4","CD8A","CD8B","FOXP3","MKI67","AURKA","AURKB")
FeaturePlot(scc_tc, features = gene_set1, min.cutoff = "q1")
Idents(scc_tc) = "seurat_clusters"
DoHeatmap(object = scc_tc, features = gene_set1)
Idents(scc_tc) = "seurat_clusters"
head(scc_tc@meta.data)
table(scc_tc@meta.data$tum.norm)
table(scc_tc@meta.data$patient)
##Now lets load the mouse data
matrix <- read.csv(file = "counts.csv",sep = ",",row.names = 1)
###Project 4 Ebola
setwd("Computational_Projects/Project4")
##Now lets load the mouse data
matrix <- read.csv(file = "counts.csv.gz",sep = ",",row.names = 1)
##Now lets load the mouse data
matrix <- read.csv(file = "counts.csv.gz",sep = ",",row.names = 1)
##Now lets load the mouse data
matrix <- read.csv(file = "counts.csv.gz",sep = ",",row.names = 1)
list.files()
setwd("~/Dropbox/computational/Projects/Computational_Projects/Project4")
##Now lets load the mouse data
matrix <- read.csv(file = "counts.csv.gz",sep = ",",row.names = 1)
matrix[1:5,1:5]
metadata <- read.csv(file = "metadata.csv",sep = ",",row.names = 1,header = T)
head(metadata)
##Lets create the seurat object for Mouse
seuratObject <- CreateSeuratObject(counts = matrix[,rownames(metadata) %in% colnames(matrix)], meta.data = metadata[rownames(metadata) %in% colnames(matrix),], project = "Project4")
seuratObject
setwd("~/Dropbox/computational/Projects/Computational_Projects/Project5")
### Let's load the data
matrix <- as.matrix(read.csv2(file = "counts.csv.gz",sep = ",",row.names = 1,header = T))
##Lets double check
matrix[1:5,1:5]
##Load metadata
metadata <- read.csv2(file = "metadata.csv",sep = ",",row.names = 1,header = T)
##Lets create the seurat object
seuratObject <- CreateSeuratObject(counts = matrix, meta.data = metadata, project = "Project_SCC")
seuratObject
setwd("~/Dropbox/computational/Projects/Computational_Projects/Project3")
##Now lets load the mouse data
mouse.matrix <- read.csv2(file = "counts.csv.gz",sep = ",",row.names = 1)
mouse.matrix[1:5,1:5]
mouse.metadata <- read.csv2(file = "metadata.csv",sep = ",",row.names = 1,header = T)
head(mouse.metadata)
##Lets create the seurat object for Mouse
seuratObject <- CreateSeuratObject(counts = mouse.matrix, meta.data = mouse.metadata, project = "Project3")
